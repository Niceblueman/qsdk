From 7db310f01888884e465a2a8a7b5fe83c0aceb4cf Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Tue, 8 Aug 2023 14:58:05 +0530
Subject: [PATCH] nl80211: Add attribute to pass critical update params

Add NL80211_ATTR_MLD_CRITICAL_UPDATE attribute to pass critical update
params to hostapd through NL80211_CMD_FRAME cmd.

Change-Id: Idb0da667706a8e90e8e6c3e2d214a1e8485ad743
Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 include/net/cfg80211.h       |   9 +++
 include/uapi/linux/nl80211.h |  70 +++++++++++++++++++
 net/wireless/nl80211.c       | 127 ++++++++++++++++++++++++++++++++++-
 3 files changed, 205 insertions(+), 1 deletion(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 26159a1..bfaee40 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6062,7 +6062,11 @@ static inline void wiphy_unlock(struct wiphy *wiphy)
  * @links[].cac_started: true if DFS channel availability check has been started
  * @links[].cac_start_time: timestamp (jiffies) when the dfs state was entered.
  * @links[].cac_time_ms: CAC time in ms
+ * @links[].critical_flag: Critical update bit for the bss
+ * @links[].bpcc: Bss param change count value for the bss
+ * @links[].switch_count: CSA/CCA count for the bss
  * @valid_links: bitmap describing what elements of @links are valid
+ * @critical_update: critical params updated on anyone wdev link
  */
 struct wireless_dev {
 	struct wiphy *wiphy;
@@ -6176,10 +6180,14 @@ struct wireless_dev {
 		bool cac_started;
 		unsigned long cac_start_time;
 		unsigned int cac_time_ms;
+		bool critical_flag;
+		u8 bpcc;
+		u8 switch_count;
 	} links[IEEE80211_MLD_MAX_NUM_LINKS];
 	u16 valid_links;
 
 	u8 reg_6g_power_mode;
+	bool critical_update;
 };
 
 static inline const u8 *wdev_address(struct wireless_dev *wdev)
@@ -8190,6 +8198,7 @@ struct cfg80211_rx_info {
 	u32 flags;
 	u64 rx_tstamp;
 	u64 ack_tstamp;
+	bool critical_update;
 };
 
 /**
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index d7b7964..b171bc3 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2826,6 +2826,10 @@ enum nl80211_commands {
  * @NL80211_ATTR_DEL_MULTI_CHAN: Delete channel from the radio, this is used
  *  for monitor interface (u32).
  *
+ * @NL80211_ATTR_RXMGMT_CRITICAL_UPDATE: Nested attribute listing the critical
+ *	update for each MLD. In each nested item, it contains attributes
+ *	defined in &enum nl80211_cu_attrs.
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3384,6 +3388,7 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_ADD_MULTI_CHAN,
 	NL80211_ATTR_DEL_MULTI_CHAN,
+	NL80211_ATTR_RXMGMT_CRITICAL_UPDATE,
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
@@ -8028,4 +8033,69 @@ enum nl80211_multi_hw_mac_chan_list_attrs {
        NL80211_MULTI_HW_MAC_CHAN_LIST_ATTR_MAX =
                                __NL80211_MULTI_HW_MAC_CHAN_LIST_ATTR_LAST - 1
 };
+
+/**
+ * nl80211_cu_attrs - critical update attributes
+ *
+ *
+ * @__NL80211_CU_ATTR_INVALID: invalid
+ * @NL80211_CU_ATTR_MLD_LIST: nested attribute specifying list of mld,
+ * see &enum nl80211_mld_list_cu_attrs
+ * @__NL80211_CU_ATTR_LAST: internal use
+ * @NL80211_CU_ATTR_MAX: maximum critical update attribute
+ */
+enum nl80211_cu_attrs {
+       __NL80211_CU_ATTR_INVALID,
+
+       NL80211_CU_ATTR_MLD_LIST,
+
+       /* keep last */
+       __NL80211_CU_ATTR_LAST,
+       NL80211_CU_ATTR_MAX = __NL80211_CU_ATTR_LAST - 1
+};
+
+/**
+ * nl80211_cu_mld_attrs - per mld critical update attributes
+ *
+ * @__NL80211_CU_MLD_ATTR_INVALID: invalid
+ * @NL80211_CU_MLD_ATTR_IFINDEX: network interface index of the device to operate on
+ * @NL80211_CU_MLD_ATTR_LINK_LIST: nested attribute specifying list of links
+ * on each mld, see &enum nl80211_cu_mld_link_attrs
+ * @__NL80211_CU_MLD_ATTR_LAST: internal use
+ * @NL80211_CU_MLD_ATTR_MAX: maximum per mld critical update attribute
+ */
+enum nl80211_cu_mld_attrs {
+       __NL80211_CU_MLD_ATTR_INVALID,
+
+       NL80211_CU_MLD_ATTR_IFINDEX,
+       NL80211_CU_MLD_ATTR_LINK_LIST,
+
+       /* keep last */
+       __NL80211_CU_MLD_ATTR_LAST,
+       NL80211_CU_MLD_ATTR_MAX = __NL80211_CU_MLD_ATTR_LAST - 1
+};
+
+/**
+ * nl80211_cu_mld_link_attrs - per link critical update attributes
+ *
+ * @__NL80211_CU_MLD_LINK_ATTR_INVALID: invalid
+ * @NL80211_CU_MLD_LINK_ATTR_ID: Link Id
+ * @NL80211_CU_MLD_LINK_ATTR_CRITICAL_FLAG: critical flag value
+ * @NL80211_CU_MLD_LINK_ATTR_BPCC: BSS parameter change count value
+ * @NL80211_CU_MLD_LINK_ATTR_SWITCH_COUNT: CSA/CCA switch count
+ * @__NL80211_CU_MLD_LINK_ATTR_LAST: internal use
+ * @NL80211_CU_MLD_LINK ATTR_MAX: maximum per link critical update attribute
+ */
+enum nl80211_cu_mld_link_attrs {
+       __NL80211_CU_MLD_LINK_ATTR_INVALID,
+
+       NL80211_CU_MLD_LINK_ATTR_ID,
+       NL80211_CU_MLD_LINK_ATTR_CRITICAL_FLAG,
+       NL80211_CU_MLD_LINK_ATTR_BPCC,
+       NL80211_CU_MLD_LINK_ATTR_SWITCH_COUNT,
+
+       /* keep last */
+       __NL80211_CU_MLD_LINK_ATTR_LAST,
+       NL80211_CU_MLD_LINK_ATTR_MAX = __NL80211_CU_MLD_LINK_ATTR_LAST - 1
+};
 #endif /* __LINUX_NL80211_H */
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index ae7d139..cb335b9 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -486,6 +486,23 @@ nl80211_sta_wme_policy[NL80211_STA_WME_MAX + 1] = {
 	[NL80211_STA_WME_MAX_SP] = { .type = NLA_U8 },
 };
 
+static const struct nla_policy
+link_policy[NL80211_CU_MLD_LINK_ATTR_MAX + 1] = {
+	[NL80211_CU_MLD_LINK_ATTR_ID] = { .type = NLA_U8 },
+	[NL80211_CU_MLD_LINK_ATTR_CRITICAL_FLAG] = { .type = NLA_FLAG },
+	[NL80211_CU_MLD_LINK_ATTR_BPCC] = { .type = NLA_U8 },
+	[NL80211_CU_MLD_LINK_ATTR_SWITCH_COUNT] = { .type = NLA_U8 },
+};
+static const struct nla_policy
+mld_policy[NL80211_CU_MLD_ATTR_MAX + 1] = {
+	[NL80211_CU_MLD_ATTR_IFINDEX] = { .type = NLA_U32 },
+	[NL80211_CU_MLD_ATTR_LINK_LIST] = NLA_POLICY_NESTED(link_policy),
+};
+static const struct nla_policy
+cu_policy[NL80211_CU_ATTR_MAX + 1] = {
+	[NL80211_CU_ATTR_MLD_LIST] = NLA_POLICY_NESTED(mld_policy),
+};
+
 static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[0] = { .strict_start_type = NL80211_ATTR_HE_OBSS_PD },
 	[NL80211_ATTR_WIPHY] = { .type = NLA_U32 },
@@ -875,6 +892,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 #endif
 	[NL80211_ATTR_ADD_MULTI_CHAN] = { .type = NLA_U32 },
 	[NL80211_ATTR_DEL_MULTI_CHAN] = { .type = NLA_U32 },
+	[NL80211_ATTR_RXMGMT_CRITICAL_UPDATE] = NLA_POLICY_NESTED(cu_policy),
 };
 
 /* policy for the key attributes */
@@ -19425,6 +19443,104 @@ bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
 }
 EXPORT_SYMBOL(cfg80211_rx_unexpected_4addr_frame);
 
+static int nl80211_send_mgmt_critical_update_len(struct wireless_dev *wdev)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct wireless_dev *tmp_wdev;
+	int link_id;
+	int cu_len = 0;
+
+	/*Add length for critical_update and mld_list nla header */
+	cu_len += 12;
+	list_for_each_entry(tmp_wdev, &rdev->wiphy.wdev_list, list) {
+		/*Add length for mld,link list nla header and
+		 *length for WDEV ifindex*/
+		cu_len += 24;
+		for_each_valid_link(tmp_wdev, link_id) {
+			/*Add length for link nla_header and
+			 * length for link_id, critical flag, bpcc and CSA count*/
+			cu_len += 24;
+		}
+	}
+	return cu_len;
+}
+
+static int nl80211_send_mgmt_critical_update(struct sk_buff *msg, struct wireless_dev *wdev)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct wireless_dev *tmp_wdev;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct nlattr *critical_update;
+	struct nlattr *mld_list, *mld;
+	struct nlattr *link_list, *link;
+	struct net_device *tmp_netdev;
+	int link_id;
+	int i = 0, j = 0;
+	critical_update = nla_nest_start_noflag(msg,
+						NL80211_ATTR_RXMGMT_CRITICAL_UPDATE);
+	if (!critical_update)
+		goto nla_fail;
+
+	mld_list = nla_nest_start_noflag(msg,
+					 NL80211_CU_ATTR_MLD_LIST);
+	if (!mld_list)
+		goto nla_fail_cu;
+
+	list_for_each_entry(tmp_wdev, &rdev->wiphy.wdev_list, list) {
+		if (!tmp_wdev->valid_links)
+			continue;
+		if (!tmp_wdev->critical_update)
+			continue;
+		mld = nla_nest_start_noflag(msg, i + 1);
+		if (!mld)
+			goto nla_fail_mld_list;
+		tmp_netdev = tmp_wdev->netdev;
+		if(tmp_netdev && nla_put_u32(msg, NL80211_CU_MLD_ATTR_IFINDEX, tmp_netdev->ifindex))
+			goto nla_fail_mld;
+		link_list = nla_nest_start_noflag(msg,
+						  NL80211_CU_MLD_ATTR_LINK_LIST);
+		if (!link_list)
+			goto nla_fail_mld;
+
+		for_each_valid_link(tmp_wdev, link_id) {
+			link = nla_nest_start_noflag(msg, j + 1);
+			if (!link)
+				goto nla_fail_link_list;
+			if(nla_put_u8(msg, NL80211_CU_MLD_LINK_ATTR_ID, link_id))
+				goto nla_fail_link;
+			if (tmp_wdev->links[link_id].critical_flag &&
+			    nla_put_flag(msg, NL80211_CU_MLD_LINK_ATTR_CRITICAL_FLAG))
+				goto nla_fail_link;
+			if (nla_put_u8(msg, NL80211_CU_MLD_LINK_ATTR_BPCC, tmp_wdev->links[link_id].bpcc))
+				goto nla_fail_link;
+			if (nla_put_u8(msg, NL80211_CU_MLD_LINK_ATTR_SWITCH_COUNT, tmp_wdev->links[link_id].switch_count))
+				goto nla_fail_link;
+			nla_nest_end(msg, link);
+			j++;
+		}
+		nla_nest_end(msg, link_list);
+		nla_nest_end(msg, mld);
+		i++;
+	}
+	nla_nest_end(msg, mld_list);
+	nla_nest_end(msg, critical_update);
+	return 0;
+
+nla_fail_link:
+	nla_nest_cancel(msg, link);
+nla_fail_link_list:
+	nla_nest_cancel(msg, link_list);
+nla_fail_mld:
+	nla_nest_cancel(msg, mld);
+nla_fail_mld_list:
+	nla_nest_cancel(msg, mld_list);
+nla_fail_cu:
+	nla_nest_cancel(msg, critical_update);
+nla_fail:
+	return -ENOBUFS;
+}
+
 int nl80211_send_mgmt(struct cfg80211_registered_device *rdev,
 		      struct wireless_dev *wdev, u32 nlportid,
 		      struct cfg80211_rx_info *info, gfp_t gfp)
@@ -19432,8 +19548,12 @@ int nl80211_send_mgmt(struct cfg80211_registered_device *rdev,
 	struct net_device *netdev = wdev->netdev;
 	struct sk_buff *msg;
 	void *hdr;
+	int cu_len = 0;
+
+	if (info->critical_update)
+		cu_len = nl80211_send_mgmt_critical_update_len(wdev);
 
-	msg = nlmsg_new(100 + info->len, gfp);
+	msg = nlmsg_new(100 + info->len + cu_len, gfp);
 	if (!msg)
 		return -ENOMEM;
 
@@ -19467,6 +19587,11 @@ int nl80211_send_mgmt(struct cfg80211_registered_device *rdev,
 						   NL80211_ATTR_PAD)))
 		goto nla_put_failure;
 
+	if (info->critical_update) {
+		if(nl80211_send_mgmt_critical_update(msg, wdev))
+			goto nla_put_failure;
+		wdev->critical_update = 0;
+	}
 	genlmsg_end(msg, hdr);
 
 	return genlmsg_unicast(wiphy_net(&rdev->wiphy), msg, nlportid);
-- 
2.17.1

