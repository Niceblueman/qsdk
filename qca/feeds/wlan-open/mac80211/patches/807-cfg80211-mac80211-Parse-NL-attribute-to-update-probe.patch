From 2cd122159b0b0d7421573b7cf5c3255ba26c0073 Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Thu, 13 Jul 2023 15:29:58 +0530
Subject: [PATCH] cfg80211/mac80211: Parse NL attribute to update probe
 response template.

Parse NL attribute and set BSS_CHANGED_UNSOL_BCAST_PROBE_RESP flag
to send updated probe response template to driver on events like CSA,
CCA.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 include/net/cfg80211.h |  4 ++++
 net/mac80211/cfg.c     | 12 ++++++++++++
 net/wireless/nl80211.c | 28 ++++++++++++++++++++++++----
 3 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 5b94d5b..26159a1 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1507,6 +1507,7 @@ struct cfg80211_ap_settings {
  * @radar_required: whether radar detection is required on the new channel
  * @block_tx: whether transmissions should be blocked while changing
  * @count: number of beacons until switch
+ * @unsol_bcast_probe_resp: Unsolicited broadcast probe response parameters
  */
 struct cfg80211_csa_settings {
 	struct cfg80211_chan_def chandef;
@@ -1519,6 +1520,7 @@ struct cfg80211_csa_settings {
 	bool radar_required;
 	bool block_tx;
 	u8 count;
+	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 };
 
 /**
@@ -1532,6 +1534,7 @@ struct cfg80211_csa_settings {
  * @beacon_next: beacon data to be used after the color change
  * @count: number of beacons until the color change
  * @color: the color used after the change
+ * @unsol_bcast_probe_resp: Unsolicited broadcast probe response parameters
  */
 struct cfg80211_color_change_settings {
 	struct cfg80211_beacon_data beacon_color_change;
@@ -1540,6 +1543,7 @@ struct cfg80211_color_change_settings {
 	struct cfg80211_beacon_data beacon_next;
 	u8 count;
 	u8 color;
+	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 };
 
 /**
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 164d111..1c7834e 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4286,6 +4286,12 @@ __ieee80211_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 	ch_switch.chandef = params->chandef;
 	ch_switch.count = params->count;
 
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata, &params->unsol_bcast_probe_resp,
+						   link, link_conf);
+	if (err)
+		goto out;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
+
 	/* should we pass link_id here ? */
 	err = drv_pre_channel_switch(sdata, &ch_switch);
 	if (err)
@@ -5326,6 +5332,12 @@ ieee80211_color_change(struct wiphy *wiphy, struct net_device *dev,
 	link_conf->color_change_active = true;
 	link_conf->color_change_color = params->color;
 
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata, &params->unsol_bcast_probe_resp,
+						   link, link_conf);
+	if (err)
+		goto out;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
+
 	cfg80211_color_change_started_notify(sdata->dev, params->count,
 					     link_id);
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 5bddfe5..7fe1369 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6244,12 +6244,10 @@ static int nl80211_parse_fils_discovery(struct cfg80211_registered_device *rdev,
 static int
 nl80211_parse_unsol_bcast_probe_resp(struct cfg80211_registered_device *rdev,
 				     struct nlattr *attrs,
-				     struct cfg80211_ap_settings *params)
+				     struct cfg80211_unsol_bcast_probe_resp *presp)
 {
 	struct nlattr *tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX + 1];
 	int ret;
-	struct cfg80211_unsol_bcast_probe_resp *presp =
-					&params->unsol_bcast_probe_resp;
 
 	if (!wiphy_ext_feature_isset(&rdev->wiphy,
 				     NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP))
@@ -6658,7 +6656,7 @@ static int nl80211_start_ap(struct sk_buff *skb, struct genl_info *info)
 	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
 		err = nl80211_parse_unsol_bcast_probe_resp(
 			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
-			params);
+			&params->unsol_bcast_probe_resp);
 		if (err)
 			goto out_unlock;
 	}
@@ -6769,6 +6767,13 @@ static int nl80211_update_ap(struct sk_buff *skb, struct genl_info *info)
 		if (err)
 			goto out;
 	}
+	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+		err = nl80211_parse_unsol_bcast_probe_resp(
+			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+			&params->unsol_bcast_probe_resp);
+		if (err)
+			goto out;
+	}
 
 	wdev_lock(wdev);
 	err = rdev_update_ap(rdev, dev, params);
@@ -10905,6 +10910,14 @@ skip_beacons:
 	if (info->attrs[NL80211_ATTR_CH_SWITCH_BLOCK_TX])
 		params.block_tx = true;
 
+	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+		err = nl80211_parse_unsol_bcast_probe_resp(
+			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+			&params.unsol_bcast_probe_resp);
+		if (err)
+			goto free;
+	}
+
 	wdev_lock(wdev);
 	err = rdev_channel_switch(rdev, dev, &params, link_id);
 	wdev_unlock(wdev);
@@ -16709,6 +16722,13 @@ static int nl80211_color_change(struct sk_buff *skb, struct genl_info *info)
 
 		params.counter_offset_presp = offset;
 	}
+	if (info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP]) {
+		err = nl80211_parse_unsol_bcast_probe_resp(
+			rdev, info->attrs[NL80211_ATTR_UNSOL_BCAST_PROBE_RESP],
+			&params.unsol_bcast_probe_resp);
+		if (err)
+			goto out;
+	}
 
 	wdev_lock(wdev);
 	err = rdev_color_change(rdev, dev, &params, link_id);
-- 
2.17.1

