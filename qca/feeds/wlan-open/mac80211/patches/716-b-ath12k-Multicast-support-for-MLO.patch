From a07c45bb1f5a6d9063c146803a6d0fe750d2d2fd Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 27 Feb 2023 02:26:27 -0800
Subject: [PATCH 2/2] ath12k: Multicast support for MLO

Deliver the Multicast/Broadcast frames on links of an MLD AP
with a unique sequence number

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  |   2 +
 drivers/net/wireless/ath/ath12k/dp.h    |  28 ++++--
 drivers/net/wireless/ath/ath12k/dp_tx.c |  24 ++++-
 drivers/net/wireless/ath/ath12k/dp_tx.h |   3 +-
 drivers/net/wireless/ath/ath12k/mac.c   | 124 ++++++++++++++++++------
 5 files changed, 141 insertions(+), 40 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index ea54eee..928efe3 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -401,6 +401,8 @@ struct ath12k_vif {
 	struct ath12k_mgmt_frame_stats mgmt_stats;
 	u8 num_vdev_created;
 	u8 num_vdev_started;
+	u16 mcbc_gsn;
+	spinlock_t mcbc_gsn_lock; /* Protect mcbc_gsn */
 	struct ath12k_vif_cache cache[IEEE80211_MLD_MAX_NUM_LINKS];
 	u8 last_scan_link;
 };
diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index 8ee21ed..3726c61 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -381,21 +381,27 @@ struct ath12k_dp {
 };
 
 /* HTT definitions */
-
-#define HTT_TCL_META_DATA_TYPE			BIT(0)
-#define HTT_TCL_META_DATA_VALID_HTT		BIT(1)
+#define HTT_TAG_TCL_METADATA_VERSION		5
+#define HTT_TCL_META_DATA_TYPE			GENMASK(1, 0)
+#define HTT_TCL_META_DATA_VALID_HTT		BIT(2)
 
 /* vdev meta data */
-#define HTT_TCL_META_DATA_VDEV_ID		GENMASK(9, 2)
-#define HTT_TCL_META_DATA_PDEV_ID		GENMASK(11, 10)
-#define HTT_TCL_META_DATA_HOST_INSPECTED	BIT(12)
+#define HTT_TCL_META_DATA_VDEV_ID		GENMASK(10, 3)
+#define HTT_TCL_META_DATA_PDEV_ID		GENMASK(12, 11)
+#define HTT_TCL_META_DATA_HOST_INSPECTED	BIT(13)
 
 /* peer meta data */
-#define HTT_TCL_META_DATA_PEER_ID		GENMASK(15, 2)
+#define HTT_TCL_META_DATA_PEER_ID		GENMASK(15, 3)
 
 #define HTT_TX_WBM_COMP_STATUS_OFFSET 8
 
-/* HTT tx completion is overlayed in wbm_release_ring */
+/* Global sequence number */
+#define HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM 3
+#define HTT_TCL_META_DATA_GLOBAL_SEQ_HOST_INSPECTED BIT(2)
+#define HTT_TCL_META_DATA_GLOBAL_SEQ_NUM GENMASK(14, 3)
+#define HTT_TX_MLO_MCAST_HOST_REINJECT_BASE_VDEV_ID 128
+
+/* HTT tx completion is overlayed in wbm_release_ring v3 version */
 #define HTT_TX_WBM_COMP_INFO0_STATUS		GENMASK(16, 13)
 #define HTT_TX_WBM_COMP_INFO1_REINJECT_REASON	GENMASK(3, 0)
 #define HTT_TX_WBM_COMP_INFO1_EXCEPTION_FRAME	BIT(4)
@@ -423,9 +429,15 @@ enum htt_h2t_msg_type {
 };
 
 #define HTT_VER_REQ_INFO_MSG_ID		GENMASK(7, 0)
+#define HTT_OPTION_TCL_METADATA_VER_V2 2
+#define HTT_OPTION_TAG GENMASK(7, 0)
+#define HTT_OPTION_LEN GENMASK(15, 8)
+#define HTT_OPTION_VALUE GENMASK(31, 16)
+#define HTT_TCL_METADATA_VER_SZ 4
 
 struct htt_ver_req_cmd {
 	u32 ver_reg_info;
+	u32 tcl_metadata_version;
 } __packed;
 
 enum htt_srng_ring_type {
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 30bb0d4..0224a67 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -155,7 +155,8 @@ static int ath12k_dp_prepare_htt_metadata(struct sk_buff *skb,
 }
 
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
-		 struct ath12k_sta *ahsta, struct sk_buff *skb)
+		 struct ath12k_sta *ahsta, struct sk_buff *skb,
+		 bool gsn_valid, int mcbc_gsn)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_base *ab = ar->ab;
@@ -241,13 +242,23 @@ tcl_ring_sel:
 		ti.meta_data_flags = arvif->tcl_metadata;
 	}
 
+	if (gsn_valid) {
+		ti.meta_data_flags = u32_encode_bits(HTT_TCL_META_DATA_TYPE_GLOBAL_SEQ_NUM,
+						     HTT_TCL_META_DATA_TYPE) |
+				     u32_encode_bits(mcbc_gsn, HTT_TCL_META_DATA_GLOBAL_SEQ_NUM);
+	}
+
 	ti.encap_type = ath12k_dp_tx_get_encap_type(arvif, skb);
 	ti.addr_search_flags = arvif->hal_addr_search_flags;
 	ti.search_type = arvif->search_type;
 	ti.type = HAL_TCL_DESC_TYPE_BUFFER;
 	ti.pkt_offset = 0;
 	ti.lmac_id = ar->lmac_id;
-	ti.vdev_id = arvif->vdev_id;
+	if (gsn_valid)
+		ti.vdev_id = arvif->vdev_id +
+			     HTT_TX_MLO_MCAST_HOST_REINJECT_BASE_VDEV_ID;
+	else
+		ti.vdev_id = arvif->vdev_id;
 	ti.bss_ast_hash = arvif->ast_hash;
 	ti.bss_ast_idx = arvif->ast_idx;
 	ti.dscp_tid_tbl_idx = 0;
@@ -1213,7 +1224,14 @@ int ath12k_dp_tx_htt_h2t_ver_req_msg(struct ath12k_base *ab)
 	skb_put(skb, len);
 	cmd = (struct htt_ver_req_cmd *)skb->data;
 	cmd->ver_reg_info = u32_encode_bits(HTT_H2T_MSG_TYPE_VERSION_REQ,
-					    HTT_VER_REQ_INFO_MSG_ID);
+					    HTT_OPTION_TAG);
+
+	cmd->tcl_metadata_version = u32_encode_bits(HTT_TAG_TCL_METADATA_VERSION,
+						    HTT_OPTION_TAG);
+	cmd->tcl_metadata_version |= u32_encode_bits(HTT_TCL_METADATA_VER_SZ,
+						     HTT_OPTION_LEN);
+	cmd->tcl_metadata_version |= u32_encode_bits(HTT_OPTION_TCL_METADATA_VER_V2,
+						     HTT_OPTION_VALUE);
 
 	ret = ath12k_htc_send(&ab->htc, dp->eid, skb);
 	if (ret) {
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.h b/drivers/net/wireless/ath/ath12k/dp_tx.h
index 930a890..8655a6e 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -216,7 +216,8 @@ struct htt_tx_msdu_desc_ext {
 void ath12k_dp_tx_update_txcompl(struct ath12k *ar, struct hal_tx_status *ts);
 int ath12k_dp_tx_htt_h2t_ver_req_msg(struct ath12k_base *ab);
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
-		 struct ath12k_sta *ahsta, struct sk_buff *skb);
+		 struct ath12k_sta *ahsta, struct sk_buff *skb,
+		 bool gsn_valid, int mcbc_gsn);
 void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id);
 
 int ath12k_dp_tx_htt_h2t_ppdu_stats_req(struct ath12k *ar, u32 mask);
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 5728982..1df7bb1 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8295,6 +8295,21 @@ static int ath12k_mac_mgmt_tx(struct ath12k *ar, struct sk_buff *skb,
 	return 0;
 }
 
+static void ath12k_mlo_mcast_update_tx_link_address(struct ieee80211_vif *vif,
+						  u8 link, struct sk_buff *skb,
+						  u32 info_flags)
+{
+	struct ieee80211_bss_conf *bss_conf;
+	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
+
+	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
+		return;
+
+	bss_conf = rcu_dereference(vif->link_conf[link]);
+	if (bss_conf)
+		ether_addr_copy(hdr->addr2, bss_conf->addr);
+}
+
 static u8 ath12k_mac_get_tx_link(struct ieee80211_sta *sta, struct ieee80211_vif *vif,
 				 u8 link, struct sk_buff *skb, u32 info_flags)
 {
@@ -8321,25 +8336,27 @@ static u8 ath12k_mac_get_tx_link(struct ieee80211_sta *sta, struct ieee80211_vif
 	/* enqueue eth data frames on assoc link */
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
 		return ahsta->assoc_link_id;
+	else if (ieee80211_is_data(hdr->frame_control))
+		return ahsta->assoc_link_id;
 
 	/* 802.11 frame cases */
 	if (link == IEEE80211_LINK_UNSPECIFIED)
 		link = ahsta->deflink.link_id;
 
-	/* Perform address conversion for ML STA Tx */
-	bss_conf = rcu_dereference(vif->link_conf[link]);
-	link_sta = rcu_dereference(sta->link[link]);
-	if (bss_conf && link_sta) {
-		ether_addr_copy(hdr->addr1, link_sta->addr);
-		ether_addr_copy(hdr->addr2, bss_conf->addr);
-	} else {
-		WARN_ON(1);
-		link = IEEE80211_MLD_MAX_NUM_LINKS;
+	if (ieee80211_is_mgmt(hdr->frame_control)) {
+		/* Perform address conversion for ML STA Tx */
+		bss_conf = rcu_dereference(vif->link_conf[link]);
+		link_sta = rcu_dereference(sta->link[link]);
+		if (bss_conf && link_sta) {
+			ether_addr_copy(hdr->addr1, link_sta->addr);
+			ether_addr_copy(hdr->addr2, bss_conf->addr);
+		} else {
+			WARN_ON(1);
+			link = IEEE80211_MLD_MAX_NUM_LINKS;
+		}
 	}
 
-	/* todo nwifi/raw data frames */
 	return link;
-
 }
 
 static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
@@ -8350,18 +8367,23 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_vif *vif = info->control.vif;
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
-	struct ath12k_link_vif *arvif;
-	struct ath12k *ar;
+	struct ath12k_link_vif *arvif, *tmp_arvif;
+	struct ath12k *ar, *tmp_ar;
 	struct ath12k_hw *ah;
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
+	struct ethhdr *eth = (struct ethhdr *)skb->data;
 	struct ieee80211_key_conf *key = info->control.hw_key;
 	struct ath12k_mgmt_frame_stats *mgmt_stats = &ahvif->mgmt_stats;
 	struct ath12k_sta *ahsta = NULL;
+	struct sk_buff *msdu_copied;
 	struct ath12k_link_sta *arsta = NULL;
 	struct ieee80211_sta *sta = control->sta;
 	u32 info_flags = info->flags;
 	bool is_prb_rsp;
+	bool is_mcast = false;
 	u16 frm_type = 0;
+	u8 link_id;
+	u16 mcbc_gsn;
 	int ret;
  	u8 link = u32_get_bits(info->control.flags, IEEE80211_TX_CTRL_MLO_LINK);
 
@@ -8407,6 +8429,7 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP) {
 		skb_cb->flags |= ATH12K_SKB_HW_80211_ENCAP;
+		is_mcast = is_multicast_ether_addr(eth->h_dest);
 	} else if (ieee80211_is_mgmt(hdr->frame_control)) {
 		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 		is_prb_rsp = ieee80211_is_probe_resp(hdr->frame_control);
@@ -8426,7 +8449,9 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 			spin_unlock_bh(&ar->data_lock);
 		}
 		return;
-	}
+	} else
+		is_mcast = is_multicast_ether_addr(hdr->addr1);
+
 	if (sta)
 		ahsta = (struct ath12k_sta *)control->sta->drv_priv;
 
@@ -8440,23 +8465,64 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		skb_cb->flags |= ATH12K_SKB_TX_STATUS;
 
-	ret = ath12k_dp_tx(ar, arvif, ahsta, skb);
-	if (unlikely(ret)) {
-		if (ret == -ENOMEM)
-			ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "failed to transmit frame %d\n",
-				   ret);
-		else
-			ath12k_warn(ar->ab, "failed to transmit frame %d\n",
-				    ret);
+	if ((hweight16(vif->valid_links) <= 1) ||
+	    ((hweight16(vif->valid_links) > 1) && !is_mcast)) {
+		ret = ath12k_dp_tx(ar, arvif, ahsta, skb, false, 0);
+		if (unlikely(ret)) {
+			if (ret == -ENOMEM)
+				ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+					   "failed to transmit frame %d\n", ret);
+			else
+				ath12k_warn(ar->ab, "failed to transmit frame %d\n", ret);
+
+			ieee80211_free_txskb(ah->hw, skb);
+		}
+		if (ath12k_debugfs_is_extd_tx_stats_enabled(ar) && ahsta) {
+			arsta = &ahsta->deflink;
+			atomic_inc(&arsta->drv_tx_pkts.pkts_in);
+			if (!ret)
+				atomic_inc(&arsta->drv_tx_pkts.pkts_out);
+		}
+	} else {
+		spin_lock(&ahvif->mcbc_gsn_lock);
+		mcbc_gsn = ahvif->mcbc_gsn++;
+		if (ahvif->mcbc_gsn > 0xFFF)
+			ahvif->mcbc_gsn = 0;
+		spin_unlock(&ahvif->mcbc_gsn_lock);
+
+		for_each_set_bit(link_id, &ahvif->links_map,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			tmp_arvif = ahvif->link[link_id];
+			if (tmp_arvif)
+				tmp_ar = tmp_arvif->ar;
+			else
+				break;
+
+			msdu_copied = skb_copy(skb, GFP_ATOMIC);
+			if (!msdu_copied) {
+				ath12k_err(ar->ab, "skb copy failure\n");
+				continue;
+			}
+
+			ath12k_mlo_mcast_update_tx_link_address(vif, link_id,
+								msdu_copied,
+								info_flags);
+			ret = ath12k_dp_tx(tmp_ar, tmp_arvif, ahsta,
+					   msdu_copied, true, mcbc_gsn);
+
+			if (unlikely(ret)) {
+				if (ret == -ENOMEM)
+					ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "failed to transmit frame %d\n",
+						   ret);
+				else
+					ath12k_warn(ar->ab, "failed to transmit frame %d\n",
+						    ret);
+				ieee80211_free_txskb(ah->hw, msdu_copied);
+			}
+		}
 		ieee80211_free_txskb(ah->hw, skb);
 	}
 
-	if (ath12k_debugfs_is_extd_tx_stats_enabled(ar) && ahsta) {
-		arsta = &ahsta->deflink;
-		atomic_inc(&arsta->drv_tx_pkts.pkts_in);
-		if (!ret)
-			atomic_inc(&arsta->drv_tx_pkts.pkts_out);
-	}
 }
 
 void ath12k_mac_drain_tx(struct ath12k *ar)
@@ -9545,6 +9611,7 @@ static int ath12k_mac_op_add_interface(struct ieee80211_hw *hw,
 
 	ahvif->deflink.ahvif = ahvif;
 	ahvif->deflink.link_id = 0;
+	ahvif->mcbc_gsn = 0;
 	INIT_LIST_HEAD(&ahvif->deflink.list);
 	INIT_WORK(&ahvif->deflink.update_obss_color_notify_work,
 		  ath12k_update_obss_color_notify_work);
@@ -14273,6 +14340,7 @@ static int ath12k_mac_hw_register(struct ath12k_hw *ah)
 	if (ag->mlo_capable) {
 		ath12k_iftypes_ext_capa[2].eml_capabilities = cap->eml_cap;
 		ath12k_iftypes_ext_capa[2].mld_capa_and_ops = cap->mld_cap;
+		ieee80211_hw_set(hw, MLO_MCAST_MULTI_LINK_TX);
 	}
 	hw->wiphy->iftype_ext_capab = ath12k_iftypes_ext_capa;
 	hw->wiphy->num_iftype_ext_capab = ARRAY_SIZE(ath12k_iftypes_ext_capa);
-- 
2.17.1

