From cbddf40ff4043e10b96ac2bd90372271e8c1e606 Mon Sep 17 00:00:00 2001
From: Vishal Kumar <quic_visk@quicinc.com>
Date: Thu, 5 Jan 2023 10:57:00 +0530
Subject: [PATCH] ath12k: RDP454 split phy bringup changes

RDP454 having quad-band channel support with two chip
2.4GHz/2x2 + 5GHz Low band/2x2 and 5GHz High band/2x2 + 6GHz/2x2.

For single wiphy, 5GHz Low band and 5GHz High bands channels combined
into wiphy->sband[NL80211_BAND_5GHZ].

Signed-off-by: Vishal Kumar <quic_visk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   2 +
 drivers/net/wireless/ath/ath12k/mac.c  | 173 +++++++++++++++++++------
 drivers/net/wireless/ath/ath12k/reg.c  |  13 ++
 3 files changed, 150 insertions(+), 38 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index b47fe0b..7c0f456 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -613,6 +613,7 @@ struct ath12k_sta {
 #define ATH12K_5G_MAX_CENTER 5920
 #define ATH12K_6G_MIN_CENTER 5935
 #define ATH12K_6G_MAX_CENTER 7115
+#define ATH12K_MIN_5G_HIGH_BAND_FREQ 5490
 #define ATH12K_MIN_5G_FREQ (ATH12K_5G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MAX_5G_FREQ (ATH12K_5G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MIN_6G_FREQ (ATH12K_6G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
@@ -717,6 +718,7 @@ enum ath12k_fw_recovery_option {
 struct ath12k_chan_info {
 	u32 low_freq;
 	u32 high_freq;
+	u32 num_channels;
 };
 
 #define ATH12K_FLUSH_TIMEOUT (5 * HZ)
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index a12f23c..b1aa3b6 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -693,8 +693,30 @@ struct ath12k_link_vif *ath12k_mac_get_arvif_by_vdev_id(struct ath12k_base *ab,
 	return NULL;
 }
 
-static struct ath12k *ath12k_mac_get_ar_by_band(struct ieee80211_hw *hw,
-						enum nl80211_band band)
+static struct ath12k *ath12k_mac_get_ar_by_agile_chandef(struct ieee80211_hw *hw,
+							 enum nl80211_band band)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k *ar;
+	int i;
+
+	if (band != NL80211_BAND_5GHZ)
+		return NULL;
+
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		if (!ar->agile_chandef.chan)
+			continue;
+		if (ar->agile_chandef.chan->center_freq > ar->chan_info.low_freq &&
+		    ar->agile_chandef.chan->center_freq < ar->chan_info.high_freq)
+			return ar;
+		ar++;
+	}
+	return NULL;
+}
+
+static struct ath12k *ath12k_mac_get_ar_by_chan(struct ieee80211_hw *hw,
+						struct ieee80211_channel *channel)
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
@@ -702,7 +724,8 @@ static struct ath12k *ath12k_mac_get_ar_by_band(struct ieee80211_hw *hw,
 
 	ar = ah->radio;
 	for (i = 0; i < ah->num_radio; i++) {
-		if (ar->mac.sbands[band].channels)
+		if (channel->center_freq >= ar->chan_info.low_freq &&
+		    channel->center_freq <= ar->chan_info.high_freq)
 			return ar;
 		ar++;
 	}
@@ -715,9 +738,7 @@ static struct ath12k *ath12k_get_ar_by_ctx(struct ieee80211_hw *hw,
 	if (!ctx)
 		return NULL;
 
-	/* TODO 5G low high split radio changes */
-
-	return ath12k_mac_get_ar_by_band(hw, ctx->def.chan->band);
+	return ath12k_mac_get_ar_by_chan(hw, ctx->def.chan);
 }
 
 struct ath12k *ath12k_get_ar_by_vif(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
@@ -4602,9 +4623,14 @@ ath12k_mac_select_scan_device(struct ieee80211_hw *hw,
 	ar = ah->radio;
 
 	for (i = 0; i < ah->num_radio; i++) {
-		/* TODO 5G low high split changes */
-		if (ar->mac.sbands[band].channels)
+		if (band == NL80211_BAND_5GHZ) {
+			if (req->req.channels[0]->center_freq > ar->chan_info.low_freq &&
+			    req->req.channels[0]->center_freq < ar->chan_info.high_freq)
+				if (ar->mac.sbands[band].channels)
+					return ar;
+		} else if (ar->mac.sbands[band].channels) {
 			return ar;
+		}
 		ar++;
 	}
 
@@ -12735,9 +12761,6 @@ static int ath12k_mac_op_get_survey(struct ieee80211_hw *hw, int idx,
 		sband = NULL;
 	}
 
-	/* TODO: If 5G HB/LB are split across two radios then it requires
-	 * idx check as well
-	 */
 	if (!sband) {
 		sband = hw->wiphy->bands[NL80211_BAND_5GHZ];
 		band = NL80211_BAND_5GHZ;
@@ -12758,10 +12781,17 @@ static int ath12k_mac_op_get_survey(struct ieee80211_hw *hw, int idx,
 		goto exit;
 	}
 
-	ar = ath12k_mac_get_ar_by_band(hw, band);
+	ar = ath12k_mac_get_ar_by_chan(hw, &sband->channels[idx]);
 	if (!ar) {
-		ret = -ENOENT;
-		goto exit;
+		if (sband->channels[idx].flags & IEEE80211_CHAN_DISABLED) {
+			ret = 0;
+			/* Flushing out the old survey results if any */
+			memset(survey, 0, sizeof(*survey));
+			goto exit;
+		} else {
+			ret = -ENOENT;
+			goto exit;
+		}
 	}
 
 	ar_survey = &ar->survey[idx];
@@ -13023,7 +13053,13 @@ static int ath12k_mac_op_set_radar_background(struct ieee80211_hw *hw,
 	int ret;
 	struct cfg80211_chan_def conf_def;
 
-	ar = ath12k_mac_get_ar_by_band(hw, NL80211_BAND_5GHZ);
+	if (def)
+		ar = ath12k_mac_get_ar_by_chan(hw, def->chan);
+	else
+		ar = ath12k_mac_get_ar_by_agile_chandef(hw, NL80211_BAND_5GHZ);
+
+	if (!ar)
+		return -EINVAL;
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -13143,25 +13179,57 @@ static void ath12k_mac_update_ch_list(struct ath12k *ar,
 	struct ieee80211_6ghz_channel *chan_6g;
         int i, j;
 
-	if (!(freq_low && freq_high))
+	if (!(freq_low && freq_high) || !band)
 		return;
 
-	if (band->band == NL80211_BAND_6GHZ) {
-                for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
-                        chan_6g = band->chan_6g[i];
-                        for (j = 0; j < chan_6g->n_channels; j++) {
-                                if (chan_6g->channels[j].center_freq < freq_low ||
-                                    chan_6g->channels[j].center_freq > freq_high)
-                                        chan_6g->channels[j].flags |= IEEE80211_CHAN_DISABLED;
-                        }
-                }
-                return;
-        }
+	switch (band->band) {
+	case NL80211_BAND_6GHZ:
+		for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+			chan_6g = band->chan_6g[i];
+
+			for (j = 0; j < chan_6g->n_channels; j++)
+				if (chan_6g->channels[j].center_freq < freq_low ||
+				    chan_6g->channels[j].center_freq > freq_high)
+					chan_6g->channels[j].flags |=
+						IEEE80211_CHAN_DISABLED;
+		}
+		ar->chan_info.num_channels = chan_6g->n_channels;
+		break;
+	case NL80211_BAND_5GHZ:
+		for (i = 0; i < band->n_channels; i++) {
+			if (band->channels[i].center_freq < freq_low ||
+			    band->channels[i].center_freq > freq_high) {
+				band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
+			} else {
+				ar->chan_info.num_channels++;
+			}
+		}
+		break;
+	case NL80211_BAND_2GHZ:
+		for (i = 0; i < band->n_channels; i++) {
+			if (band->channels[i].center_freq < freq_low ||
+			    band->channels[i].center_freq > freq_high)
+				band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
+			ar->chan_info.num_channels++;
+		}
+		break;
+	default:
+		break;
+	}
+}
+
+static void ath12k_mac_update_5g_high_ch_list(struct ath12k *ar,
+					      struct ieee80211_supported_band *band)
+{
+	int i;
 
 	for (i = 0; i < band->n_channels; i++) {
-		if (band->channels[i].center_freq < freq_low ||
-		    band->channels[i].center_freq > freq_high)
-			band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
+		if (band->channels[i].center_freq >= ATH12K_MIN_5G_HIGH_BAND_FREQ &&
+		    band->channels[i].center_freq <= ATH12K_MAX_5G_FREQ) {
+			/* enable 5g high band channels */
+			band->channels[i].flags &= ~IEEE80211_CHAN_DISABLED;
+			ar->chan_info.num_channels++;
+		}
 	}
 }
 
@@ -13250,9 +13318,9 @@ static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
 					     ab->reg_freq_2g.end_freq));
 
 		ah->supported_band_mask |= BIT(NL80211_BAND_2GHZ);
-		ar->chan_info.low_freq = max(temp_reg_cap->low_2ghz_chan,
+		ar->chan_info.low_freq = min(temp_reg_cap->low_2ghz_chan,
 					     ab->reg_freq_2g.start_freq);
-		ar->chan_info.high_freq = min(temp_reg_cap->high_2ghz_chan,
+		ar->chan_info.high_freq = max(temp_reg_cap->high_2ghz_chan,
 					      ab->reg_freq_2g.end_freq);
 	}
 
@@ -13280,6 +13348,26 @@ static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
                         band->channels = channels;
                         band->n_bitrates = ath12k_a_rates_size;
                         band->bitrates = ath12k_a_rates;
+
+			/* In case of MLO. 5G low and High channel needs to be combined
+			 * in wiphy->bands[NL80211_BAND_5GHZ]. combining 5G high into low
+			 * channels based on frequency.
+			 **/
+			if (ab->ag->mlo_capable &&
+			    reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_HIGH_BAND_FREQ &&
+			    reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) {
+				/* 5g high only*/
+				ar->chan_info.low_freq = max(temp_reg_cap->low_5ghz_chan,
+							     ab->reg_freq_5g.start_freq);
+				ar->chan_info.high_freq = min(temp_reg_cap->high_5ghz_chan,
+							      ab->reg_freq_5g.end_freq);
+				band = ah->hw->wiphy->bands[NL80211_BAND_5GHZ];
+				if (band && band->channels) {
+					ath12k_mac_update_5g_high_ch_list(ar, band);
+					ath12k_mac_update_5_9_ch_list(ar, band);
+				}
+				return 0;
+			}
                         ah->hw->wiphy->bands[NL80211_BAND_5GHZ] = band;
 
                         if (ar->ab->hw_params->single_pdev_only) {
@@ -13626,7 +13714,8 @@ ath12k_setup_per_hw_chan(struct ath12k *ar)
 	struct ieee80211_chans_per_hw *chans;
 	struct ieee80211_supported_band *band;
 	struct ath12k_pdev *pdev = ar->pdev;
-	int chan_sz;
+	int chan_sz, i, idx = 0;
+	u32 n_channels = ar->chan_info.num_channels;
 
 	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP) {
 		band = &ar->mac.sbands[NL80211_BAND_2GHZ];
@@ -13636,16 +13725,24 @@ ath12k_setup_per_hw_chan(struct ath12k *ar)
 		band = &ar->mac.sbands[NL80211_BAND_6GHZ];
 	}
 
-	chan_sz = band->n_channels * sizeof(struct ieee80211_channel);
+	chan_sz = n_channels * sizeof(struct ieee80211_channel);
 	chans = kzalloc(chan_sz, GFP_KERNEL);
 	if (!chans)
 		return NULL;
-	memcpy(chans->chans, band->channels, sizeof(struct ieee80211_channel) * band->n_channels);
 
-	chans->n_chans = band->n_channels;
+	chans->n_chans = n_channels;
+	for (i = 0; i < band->n_channels; i++) {
+		if (band->band == NL80211_BAND_5GHZ) {
+			if (band->channels[i].center_freq > ar->chan_info.low_freq &&
+			    band->channels[i].center_freq < ar->chan_info.high_freq)
+				memcpy(&chans->chans[idx++], &band->channels[i],
+				       sizeof(struct ieee80211_channel));
+		} else {
+			memcpy(&chans->chans[idx++], &band->channels[i],
+			       sizeof(struct ieee80211_channel));
+		}
+	}
 	return chans;
-
-
 }
 static int ath12k_alloc_per_hw_chans(struct ath12k_hw *ah)
 {
diff --git a/drivers/net/wireless/ath/ath12k/reg.c b/drivers/net/wireless/ath/ath12k/reg.c
index bc14a11..f8b96e9 100644
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -181,6 +181,12 @@ int ath12k_reg_update_chan_list(struct ath12k *ar)
 			    IEEE80211_CHAN_DISABLED)
 				continue;
 
+			if (band == NL80211_BAND_5GHZ)
+				if (bands[band]->channels[i].center_freq <
+				    ar->chan_info.low_freq ||
+				    bands[band]->channels[i].center_freq >
+				    ar->chan_info.high_freq)
+					continue;
 			num_channels++;
 		}
 	}
@@ -210,6 +216,13 @@ int ath12k_reg_update_chan_list(struct ath12k *ar)
 			if (channel->flags & IEEE80211_CHAN_DISABLED)
 				continue;
 
+			if (band == NL80211_BAND_5GHZ)
+				if (bands[band]->channels[i].center_freq <
+				    ar->chan_info.low_freq ||
+				    bands[band]->channels[i].center_freq >
+				    ar->chan_info.high_freq)
+					continue;
+
 			/* TODO: Set to true/false based on some condition? */
 			ch->allow_ht = true;
 			ch->allow_vht = true;
-- 
2.17.1

