From 12c2ab88e593e4b90cf26d20fde99d1fbdae5d27 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Mon, 10 Jul 2023 16:05:20 +0530
Subject: [PATCH] ath12k: add WAR for handling MSDU buffer type

REO exception ring of IPQ5322 receives buffer type other than
MSDU descriptor type which is unexpected behaviour. This results
in triggering host BUG_ON. In the multiclient, this particular
behaviour is observed frequently.

To unblock the testing, add a workaround by removing the BUG_ON and
free the problematic descriptor and increments the soc stats counter.
Also add ath12k_enable_bug_on module parameter to enable BUG_ON in
the datapath.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c |  2 ++
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 10 +++-------
 drivers/net/wireless/ath/ath12k/hal_rx.c  | 23 ++++++++++++++++++++++-
 4 files changed, 28 insertions(+), 8 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1156,6 +1156,7 @@ struct ath12k_soc_dp_stats {
 	struct ath12k_soc_dp_tx_err_stats tx_err;
 	struct ath12k_dp_ring_bp_stats bp_stats;
 	u32 first_and_last_msdu_bit_miss;
+	u32 reo_excep_msdu_buf_type;
 };
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1627,6 +1627,8 @@ static ssize_t ath12k_debugfs_dump_soc_d
 		len += scnprintf(buf + len, size - len, "%s: handled %u dropped %u\n",
 				 reo_err[i], soc_stats->reo_error[i],
 				 soc_stats->reo_error_drop[i]);
+	len += scnprintf(buf + len, size - len, "REO excep MSDU buf type:%u\n",
+			 soc_stats->reo_excep_msdu_buf_type);
 
 	len += scnprintf(buf + len, size - len, "\nHAL REO errors:\n");
 	len += scnprintf(buf + len, size - len,
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4220,11 +4220,17 @@ int ath12k_dp_rx_process_err(struct ath1
 		ret = ath12k_hal_desc_reo_parse_err(ab, desc, &paddr,
 						    &desc_bank);
 		if (ret) {
-			scnprintf(buf, sizeof(buf), "failed to parse error reo desc %d\n", ret);
-			ath12k_err_dump(ab, buf, "rx err desc: ", reo_desc,
-					sizeof(*reo_desc), srng);
-			BUG_ON(1);
+			if (ath12k_enable_bug_on) {
+				scnprintf(buf, sizeof(buf), "failed to parse error reo desc %d\n", ret);
+				ath12k_err_dump(ab, buf, "rx err desc: ", reo_desc,
+						sizeof(*reo_desc), srng);
+				BUG_ON(1);
+			} else {
+				tot_n_bufs_reaped++;
+				goto next_entry;
+			}
 		}
+
 		link_desc_va = link_desc_banks[desc_bank].vaddr +
 			       (paddr - link_desc_banks[desc_bank].paddr);
 		ath12k_hal_rx_msdu_link_info_get(link_desc_va, &num_msdus, msdu_cookies,
@@ -4270,6 +4276,7 @@ int ath12k_dp_rx_process_err(struct ath1
 				tot_n_bufs_reaped++;
 		}
 
+next_entry:
 		if (tot_n_bufs_reaped >= quota) {
 			tot_n_bufs_reaped = quota;
 			goto exit;
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -326,6 +326,9 @@ int ath12k_hal_desc_reo_parse_err(struct
 				  dma_addr_t *paddr, u32 *desc_bank)
 {
 	struct hal_reo_dest_ring *desc = (struct hal_reo_dest_ring *)rx_desc;
+	struct ath12k_rx_desc_info *desc_info;
+	struct sk_buff *msdu;
+	u64 desc_va;
 	enum hal_reo_dest_ring_push_reason push_reason;
 	enum hal_reo_dest_ring_error_code err_code;
 	u32 cookie;
@@ -345,7 +348,34 @@ int ath12k_hal_desc_reo_parse_err(struct
 
 	if (u32_get_bits(desc->info0, HAL_REO_DEST_RING_INFO0_BUFFER_TYPE) !=
 	    HAL_REO_DEST_RING_BUFFER_TYPE_LINK_DESC) {
-		ath12k_warn(ab, "expected buffer type link_desc");
+
+		/* Incase of enable bug on, avoid free the skb which helps to analyse
+		 * the crash dump
+		 */
+		if (ath12k_enable_bug_on)
+			return -EINVAL;
+
+		desc_va = ((u64)desc->buf_va_hi << 32 | desc->buf_va_lo);
+		desc_info = (struct ath12k_rx_desc_info *)((unsigned long)desc_va);
+		if (!desc_info) {
+			ath12k_warn(ab, " RX Exception, HW cookie conversion failed");
+			goto skip_skb_free;
+		}
+
+		if (desc_info->magic != ATH12K_DP_RX_DESC_MAGIC) {
+			ath12k_warn(ab, " RX Exception, magic check failed");
+			goto skip_skb_free;
+		}
+
+		msdu = desc_info->skb;
+		desc_info->skb = NULL;
+		spin_lock_bh(&ab->dp.rx_desc_lock);
+		list_move_tail(&desc_info->list, &ab->dp.rx_desc_free_list);
+		spin_unlock_bh(&ab->dp.rx_desc_lock);
+		dev_kfree_skb_any(msdu);
+
+skip_skb_free:
+		ab->soc_stats.reo_excep_msdu_buf_type++;
 		return -EINVAL;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -64,6 +64,10 @@ bool ath12k_mgmt_rx_reordering = false;
 module_param_named(mgmt_rx_reorder, ath12k_mgmt_rx_reordering, bool, 0644);
 MODULE_PARM_DESC(mgmt_rx_reorder, "Mgmt Rx Re-Ordering (0 - disable, 1 - enable)");
 
+unsigned int ath12k_enable_bug_on;
+module_param_named(enable_bug_on, ath12k_enable_bug_on, uint, 0644);
+MODULE_PARM_DESC(enable_bug_on, "Enable bug on for data path modules");
+
 static DEFINE_MUTEX(ath12k_hw_lock);
 static struct list_head ath12k_hw_groups = LIST_HEAD_INIT(ath12k_hw_groups);
 
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -7,6 +7,8 @@
 #ifndef ATH12K_HAL_RX_H
 #define ATH12K_HAL_RX_H
 
+extern unsigned int ath12k_enable_bug_on;
+
 struct hal_rx_wbm_rel_info {
 	u32 cookie;
 	enum hal_wbm_rel_src_module err_rel_src;
