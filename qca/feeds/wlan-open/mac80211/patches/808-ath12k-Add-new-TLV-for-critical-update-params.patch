From 143ecc6a0461ed4272c50c81e93210ff59174abf Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Thu, 13 Jul 2023 15:07:01 +0530
Subject: [PATCH] ath12k: Add new TLV for critical update params

Add new TLV to append critical update params on WMI_PRB_TMPL_CMDID.
When sending WMI_BCN_TMPL_CMDID, retain a copy of CU vdev bitmap and use it
to update this new tlv on 20TU probe response template.
These CU params are used to set Critical update bit and BPCC values on
unsolicited broadcast probe response frame on 6Ghz.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  9 ++++
 drivers/net/wireless/ath/ath12k/wmi.c  | 61 ++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/wmi.h  | 10 +++++
 3 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 8a10661..a11b08a 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -353,6 +353,14 @@ struct ath12k_peer_ch_width_switch_data {
 	struct wmi_chan_width_peer_arg peer_arg[];
 };
 
+struct ath12k_prb_resp_tmpl_ml_info {
+	u32 hw_link_id;
+	u32 cu_vdev_map_cat1_lo;
+	u32 cu_vdev_map_cat1_hi;
+	u32 cu_vdev_map_cat2_lo;
+	u32 cu_vdev_map_cat2_hi;
+};
+
 struct ath12k_link_vif {
 	struct ath12k_base *ab;
 	struct ath12k_dp *dp;
@@ -420,6 +428,7 @@ struct ath12k_link_vif {
 	struct completion peer_ch_width_switch_send;
 	struct work_struct peer_ch_width_switch_work;
 	struct ath12k_peer_ch_width_switch_data *peer_ch_width_switch_data;
+	struct ath12k_prb_resp_tmpl_ml_info ml_info;
 };
 
 struct ath12k_vif {
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 5172ded..66402e5 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2243,6 +2243,8 @@ static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 	struct wmi_bcn_tmpl_ml_info *ml_info;
 	int i;
 	u64 non_tx_ml_vdev_bmap = 0;
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_prb_resp_tmpl_ml_info *ar_ml_info;
 
 	list_for_each_entry(arvif_iter, &arvif->ar->arvifs, list) {
 		if (arvif_iter != arvif && arvif_iter->tx_vdev_id == arvif->vdev_id &&
@@ -2273,6 +2275,17 @@ static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 		for (i = 0; i < cu_arg->num_ml_info; i++) {
 			ml_info = &cu_arg->ml_info[i];
 			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info, non_tx_ml_vdev_bmap);
+			/* Retain copy of CU vdev bitmap. Which are used to
+			 * update cu_vdev_map in 20TU probe response template.
+			 */
+			if (ar->supports_6ghz) {
+				ar_ml_info = &arvif->ml_info;
+				ar_ml_info->hw_link_id = ml_info->hw_link_id;
+				ar_ml_info->cu_vdev_map_cat1_lo = ml_info->cu_vdev_map_cat1_lo;
+				ar_ml_info->cu_vdev_map_cat1_hi = ml_info->cu_vdev_map_cat1_hi;
+				ar_ml_info->cu_vdev_map_cat2_lo = ml_info->cu_vdev_map_cat2_lo;
+				ar_ml_info->cu_vdev_map_cat2_hi = ml_info->cu_vdev_map_cat2_hi;
+			}
 		}
 	}
 }
@@ -4850,6 +4863,37 @@ int ath12k_wmi_fils_discovery_tmpl(struct ath12k *ar, u32 vdev_id,
 	return ret;
 }
 
+static void *
+ath12k_wmi_append_prb_resp_cu_params(struct ath12k *ar, u32 vdev_id, void *ptr)
+{
+	struct wmi_prb_resp_tmpl_ml_info *ml_info;
+	struct ath12k_prb_resp_tmpl_ml_info *ar_ml_info;
+	void *start = ptr;
+	struct wmi_tlv *tlv;
+	struct ath12k_link_vif *arvif = ath12k_mac_get_arvif(ar, vdev_id);
+	size_t ml_info_len = sizeof(*ml_info);
+
+	/* Add ML info */
+	tlv = (struct wmi_tlv *)ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, ml_info_len);
+	ml_info = (struct wmi_prb_resp_tmpl_ml_info *)tlv->value;
+
+	ar_ml_info = &arvif->ml_info;
+	ml_info->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_PRB_RESP_TMPL_ML_INFO_CMD, sizeof(*ml_info));
+	ml_info->hw_link_id = ml_info->hw_link_id;
+	ml_info->cu_vdev_map_cat1_lo = ar_ml_info->cu_vdev_map_cat1_lo;
+	ml_info->cu_vdev_map_cat1_hi = ar_ml_info->cu_vdev_map_cat1_hi;
+	ml_info->cu_vdev_map_cat2_lo = ar_ml_info->cu_vdev_map_cat2_lo;
+	ml_info->cu_vdev_map_cat2_hi = ar_ml_info->cu_vdev_map_cat2_hi;
+
+	ptr += TLV_HDR_SIZE + ml_info_len;
+	/* Reset CU bitmap and bpcc values*/
+	memset(&arvif->ml_info, 0, sizeof(arvif->ml_info));
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "wmi %ld bytes of additional data filled for prb resp CU\n",
+		   (unsigned long)(ptr - start));
+	return ptr;
+}
+
 int ath12k_wmi_probe_resp_tmpl(struct ath12k *ar, u32 vdev_id,
 			       struct sk_buff *tmpl)
 {
@@ -4858,18 +4902,23 @@ int ath12k_wmi_probe_resp_tmpl(struct ath12k *ar, u32 vdev_id,
 	struct wmi_tlv *tlv;
 	struct sk_buff *skb;
 	void *ptr;
-	int ret, len;
+	int ret, len, mlinfo_tlv_len = 0;
 	size_t aligned_len = roundup(tmpl->len, 4);
+	struct ath12k_link_vif *arvif = ath12k_mac_get_arvif(ar, vdev_id);
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
 		   "WMI vdev %i set probe response template\n", vdev_id);
 
-	len = sizeof(*cmd) + sizeof(*probe_info) + TLV_HDR_SIZE + aligned_len;
+	if (ath12k_mac_is_ml_arvif(arvif))
+		mlinfo_tlv_len = TLV_HDR_SIZE + sizeof(struct wmi_prb_resp_tmpl_ml_info);
+
+	len = sizeof(*cmd) + sizeof(*probe_info) + TLV_HDR_SIZE + aligned_len + mlinfo_tlv_len;
 
 	skb = ath12k_wmi_alloc_skb(ar->wmi->wmi_ab, len);
-	if (!skb)
+	if (!skb) {
+		memset(&arvif->ml_info, 0, sizeof(arvif->ml_info));
 		return -ENOMEM;
-
+	}
 	cmd = (struct wmi_probe_tmpl_cmd *)skb->data;
 	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_PRB_TMPL_CMD,
 						 sizeof(*cmd));
@@ -4890,7 +4939,11 @@ int ath12k_wmi_probe_resp_tmpl(struct ath12k *ar, u32 vdev_id,
 	tlv = ptr;
 	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_BYTE, aligned_len);
 	memcpy(tlv->value, tmpl->data, tmpl->len);
+	ptr += (TLV_HDR_SIZE + aligned_len);
 
+	if (ath12k_mac_is_ml_arvif(arvif)) {
+		ptr = ath12k_wmi_append_prb_resp_cu_params(ar, vdev_id, ptr);
+	}
 	ret = ath12k_wmi_cmd_send(ar->wmi, skb, WMI_PRB_TMPL_CMDID);
 	if (ret) {
 		ath12k_warn(ar->ab,
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 588ad82..5bc0788 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2055,6 +2055,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
 	WMI_TAG_CTRL_PATH_EVENT_FIXED_PARAM,
+	WMI_TAG_PRB_RESP_TMPL_ML_INFO_CMD = 0x460,
 	WMI_TAG_MAX
 };
 
@@ -8157,6 +8158,15 @@ struct wmi_critical_update_arg {
 	struct wmi_bcn_tmpl_ml_info *ml_info;
 };
 
+struct wmi_prb_resp_tmpl_ml_info {
+	__le32 tlv_header;
+	__le32 hw_link_id;
+	__le32 cu_vdev_map_cat1_lo;
+	__le32 cu_vdev_map_cat1_hi;
+	__le32 cu_vdev_map_cat2_lo;
+	__le32 cu_vdev_map_cat2_hi;
+} __packed;
+
 #define ATH12K_LOWER_32_MASK			GENMASK_ULL(31, 0)
 #define ATH12K_UPPER_32_MASK			GENMASK_ULL(63, 32)
 #define ATH12K_GET_LOWER_32_BITS(val)		(val & ATH12K_LOWER_32_MASK)
-- 
2.17.1

