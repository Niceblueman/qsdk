From 8c8a55cd772bfa1d7b909152ddb0e0416c144b79 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Wed, 4 Jan 2023 16:13:05 +0530
Subject: [PATCH] ath12k: add support for set bit rate

Currently, we set bit rate form user space according to phy.
But, in multi-link operation each phy has more than one link
and each link is work on different bit rate.

So, add support to set bit rate according to link id.

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5362,6 +5362,7 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
 	int ret, i;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -5382,6 +5383,16 @@ ath12k_mac_set_peer_vht_fixed_rate(struc
 		return -EINVAL;
 	}
 
+	/* Avoid updating invalid nss as fixed rate*/
+	rcu_read_lock();
+	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+	if (!link_sta || nss > link_sta->rx_nss) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+
+	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed VHT Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -5412,6 +5423,7 @@ ath12k_mac_set_peer_he_fixed_rate(struct
 	int ret, i;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -5433,9 +5445,15 @@ ath12k_mac_set_peer_he_fixed_rate(struct
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	if (nss > sta->deflink.rx_nss)
+	rcu_read_lock();
+	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+	if (!link_sta || nss > link_sta->rx_nss) {
+		rcu_read_unlock();
 		return -EINVAL;
+	}
 
+	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed HE Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -5467,6 +5485,7 @@ ath12k_mac_set_peer_ht_fixed_rate(struct
 	int ret, i;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -5488,9 +5507,15 @@ ath12k_mac_set_peer_ht_fixed_rate(struct
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	if (nss > sta->deflink.rx_nss)
+	rcu_read_lock();
+	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+	if (!link_sta || nss > link_sta->rx_nss) {
+		rcu_read_unlock();
 		return -EINVAL;
+	}
 
+	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 			"Setting Fixed HT Rate for peer %pM. Device will not switch to any other selected rates",
 		  sta->addr);
@@ -5522,6 +5547,7 @@ ath12k_mac_set_peer_eht_fixed_rate(struc
 	int ret, i;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -5543,9 +5569,15 @@ ath12k_mac_set_peer_eht_fixed_rate(struc
 	}
 
 	/* Avoid updating invalid nss as fixed rate*/
-	if (nss > sta->deflink.rx_nss)
+	rcu_read_lock();
+	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+	if (!link_sta || nss > link_sta->rx_nss) {
+		rcu_read_unlock();
 		return -EINVAL;
+	}
 
+	rcu_read_unlock();
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "Setting Fixed EHT Rate for peer %pM. Device will not switch to any other selected rates",
 		   arsta->addr);
@@ -5826,6 +5858,8 @@ static void ath12k_sta_rc_update_wk(stru
 	struct peer_assoc_params peer_arg;
 	enum wmi_phy_mode peer_phymode;
 	struct ath12k_sta *ahsta;
+	struct ieee80211_link_sta *link_sta = NULL;
+	bool ht_supp, vht_supp, has_he, has_eht;
 
 	arsta = container_of(wk, struct ath12k_link_sta, update_wk);
 	ahsta = arsta->ahsta;
@@ -5834,8 +5868,7 @@ static void ath12k_sta_rc_update_wk(stru
 	ahvif = arvif->ahvif;
 	ar = arvif->ar;
 
-	/* TODO get link_id and pass for ML - link STA */
-	if (WARN_ON(ath12k_mac_vif_chan(ahvif->vif, &def, 0)))
+	if (WARN_ON(ath12k_mac_vif_chan(ahvif->vif, &def, arsta->link_id)))
 		return;
 
 	band = def.chan->band;
@@ -5956,16 +5989,31 @@ static void ath12k_sta_rc_update_wk(stru
 		 * TODO: Check RATEMASK_CMDID to support auto rates selection
 		 * across HT/VHT and for multiple VHT MCS support.
 		 */
-		if (sta->deflink.vht_cap.vht_supported && num_vht_rates == 1) {
+		rcu_read_lock();
+		link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+		if (!link_sta) {
+			rcu_read_unlock();
+			goto err_rc_bw_changed;
+		}
+
+		ht_supp = link_sta->ht_cap.ht_supported;
+		vht_supp = link_sta->vht_cap.vht_supported;
+		has_he = link_sta->he_cap.has_he;
+		has_eht = link_sta->eht_cap.has_eht;
+		rcu_read_unlock();
+
+		if (vht_supp && num_vht_rates == 1) {
+
 			ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
 							   band);
-		} else if (sta->deflink.he_cap.has_he && num_he_rates == 1) {
+		} else if (has_he && num_he_rates == 1) {
 			ath12k_mac_set_peer_he_fixed_rate(arvif, arsta, mask,
 							  band);
-		} else if (sta->deflink.eht_cap.has_eht && num_eht_rates == 1) {
+		} else if (has_eht && num_eht_rates == 1) {
 			ath12k_mac_set_peer_eht_fixed_rate(arvif, arsta, mask,
 							   band);
-		} else if (sta->deflink.ht_cap.ht_supported && num_ht_rates == 1) {
+		} else if (ht_supp && num_ht_rates == 1) {
 			ath12k_mac_set_peer_ht_fixed_rate(arvif, arsta, mask,
 							  band);
 		} else {
@@ -12394,7 +12442,7 @@ ath12k_mac_check_fixed_rate_settings_for
 
 static int
 ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
-			       struct ieee80211_vif *vif,
+			       struct ieee80211_vif *vif, unsigned int link_id,
 			       const struct cfg80211_bitrate_mask *mask)
 {
 	struct ath12k_hw *ah = hw->priv;
@@ -12422,8 +12470,6 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	bool he_fixed_rate = false;
 	bool eht_fixed_rate = false;
 	struct ath12k_link_vif *arvif;
-	/* TODO move after link id passed through this op */
-	u8 link_id = 0;
 
 	if (ath12k_mac_vif_chan(vif, &def, link_id))
 		return -EPERM;
