From 74242f86c4ab9b154a1060a2c3352b793ab768de Mon Sep 17 00:00:00 2001
From: Sohan Madhav Bangaru <quic_sbangaru@quicinc.com>
Date: Wed, 16 Nov 2022 12:05:53 -0800
Subject: [PATCH] arm-support-musl

Signed-off-by: Sohan Madhav Bangaru <quic_sbangaru@quicinc.com>
---
 configure.ac                                       |  2 +-
 .../crash_generation/crash_generation_server.cc    | 15 ++++++++++++--
 src/client/linux/dump_writer_common/thread_info.cc |  6 ++++--
 .../linux/dump_writer_common/ucontext_reader.cc    |  5 ++++-
 src/client/linux/handler/exception_handler.cc      | 17 +++++++++++++++
 .../linux/minidump_writer/linux_core_dumper.cc     |  2 +-
 src/common/dwarf/elf_reader.cc                     |  4 ++++
 src/common/linux/elf_core_dump.h                   |  5 ++++-
 src/common/memory_allocator.h                      |  2 +-
 src/common/stabs_reader.cc                         |  2 ++
 src/common/stabs_reader.h                          | 24 ++++++++++++++++++++++
 src/common/stabs_reader_unittest.cc                |  2 ++
 src/tools/linux/md2core/minidump-2-core.cc         |  4 ++++
 13 files changed, 81 insertions(+), 9 deletions(-)

diff --git a/configure.ac b/configure.ac
index 20fb075..41a23af 100644
--- a/configure.ac
+++ b/configure.ac
@@ -72,7 +72,7 @@ AC_ARG_ENABLE(m32,
 AC_HEADER_STDC
 AC_SYS_LARGEFILE
 AX_PTHREAD
-AC_CHECK_HEADERS([a.out.h sys/mman.h sys/random.h])
+AC_CHECK_HEADERS([a.out.h stab.h sys/mman.h sys/random.h sys/reg.h])
 AC_CHECK_FUNCS([arc4random getcontext getrandom memfd_create])
 AM_CONDITIONAL([HAVE_GETCONTEXT], [test "x$ac_cv_func_getcontext" = xyes])
 AM_CONDITIONAL([HAVE_MEMFD_CREATE], [test "x$ac_cv_func_memfd_create" = xyes])
diff --git a/src/client/linux/crash_generation/crash_generation_server.cc b/src/client/linux/crash_generation/crash_generation_server.cc
index 8332f59..efb5fa9 100644
--- a/src/client/linux/crash_generation/crash_generation_server.cc
+++ b/src/client/linux/crash_generation/crash_generation_server.cc
@@ -28,7 +28,6 @@
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #include <assert.h>
-#include <dirent.h>
 #include <fcntl.h>
 #include <limits.h>
 #include <poll.h>
@@ -49,6 +48,8 @@
 #include "common/linux/guid_creator.h"
 #include "common/linux/safe_readlink.h"
 
+#include <dirent.h>
+
 static const char kCommandQuit = 'x';
 
 namespace google_breakpad {
@@ -229,9 +230,19 @@ CrashGenerationServer::ClientEvent(short revents)
   // Walk the control payload and extract the file descriptor and validated pid.
   pid_t crashing_pid = -1;
   int signal_fd = -1;
+#ifndef __GLIBC__
+  // In musl-libc, CMSG_NXTHDR typecasts char* to cmsghdr* which causes
+  // clang to throw sign-compare warning. This is to suppress the warning
+  // inline.
+  #pragma clang diagnostic push
+  #pragma clang diagnostic ignored "-Wsign-compare"
+#endif
   for (struct cmsghdr* hdr = CMSG_FIRSTHDR(&msg); hdr;
        hdr = CMSG_NXTHDR(&msg, hdr)) {
-    if (hdr->cmsg_level != SOL_SOCKET)
+#ifndef __GLIBC__
+  #pragma clang diagnostic pop
+#endif
+      if (hdr->cmsg_level != SOL_SOCKET)
       continue;
     if (hdr->cmsg_type == SCM_RIGHTS) {
       const unsigned len = hdr->cmsg_len -
diff --git a/src/client/linux/dump_writer_common/thread_info.cc b/src/client/linux/dump_writer_common/thread_info.cc
index aae1dc1..deaa433 100644
--- a/src/client/linux/dump_writer_common/thread_info.cc
+++ b/src/client/linux/dump_writer_common/thread_info.cc
@@ -229,7 +229,6 @@ void ThreadInfo::FillCPUContext(RawContextCPU* out) const {
 }
 
 #elif defined(__mips__)
-
 uintptr_t ThreadInfo::GetInstructionPointer() const {
   return mcontext.pc;
 }
@@ -263,8 +262,11 @@ void ThreadInfo::FillCPUContext(RawContextCPU* out) const {
   out->cause = 0; // Not stored in mcontext
 
   for (int i = 0; i < MD_FLOATINGSAVEAREA_MIPS_FPR_COUNT; ++i)
+#ifdef __GLIBC__
     out->float_save.regs[i] = mcontext.fpregs.fp_r.fp_fregs[i]._fp_fregs;
-
+#else
+    out->float_save.regs[i] = mcontext.fpregs[i];
+#endif
   out->float_save.fpcsr = mcontext.fpc_csr;
 #if _MIPS_SIM == _ABIO32
   out->float_save.fir = mcontext.fpc_eir;
diff --git a/src/client/linux/dump_writer_common/ucontext_reader.cc b/src/client/linux/dump_writer_common/ucontext_reader.cc
index 6eec1be..cf1dcec 100644
--- a/src/client/linux/dump_writer_common/ucontext_reader.cc
+++ b/src/client/linux/dump_writer_common/ucontext_reader.cc
@@ -247,8 +247,11 @@ void UContextReader::FillCPUContext(RawContextCPU* out, const ucontext_t* uc) {
   out->cause = 0;  // Not reported in signal context.
 
   for (int i = 0; i < MD_FLOATINGSAVEAREA_MIPS_FPR_COUNT; ++i)
+#ifdef __GLIBC__
     out->float_save.regs[i] = uc->uc_mcontext.fpregs.fp_r.fp_dregs[i];
-
+#else
+    out->float_save.regs[i] = uc->uc_mcontext.fpregs[i];
+#endif
   out->float_save.fpcsr = uc->uc_mcontext.fpc_csr;
 #if _MIPS_SIM == _ABIO32
   out->float_save.fir = uc->uc_mcontext.fpc_eir;  // Unused.
diff --git a/src/client/linux/handler/exception_handler.cc b/src/client/linux/handler/exception_handler.cc
index 499be0a..8fc3d0f 100644
--- a/src/client/linux/handler/exception_handler.cc
+++ b/src/client/linux/handler/exception_handler.cc
@@ -490,7 +490,19 @@ bool ExceptionHandler::SimulateSignalDelivery(int sig) {
   siginfo.si_code = SI_USER;
   siginfo.si_pid = getpid();
   ucontext_t context;
+#if defined(__GLIBC__)
   getcontext(&context);
+#else
+  // Extreme hack: Allow musl builds to compile - but don't expect them to work.
+  // Although musl provides a definition for getcontext() in ucontext.h (which
+  // enough to build libbreakpad_client) musl does not provide a corresponding
+  // getcontext() function, so builds will fail when attempting to link anything
+  // with libbreakpad_client. Disabling calls to getcontext() is a temporary
+  // hack. The real fix is probably to enable Breakpad's own implementation of
+  // getcontext() when building for musl (it's currently only enabled when
+  // building for Android).
+  memset (&context, 0, sizeof(context));
+#endif
   return HandleSignal(sig, &siginfo, &context);
 }
 
@@ -675,9 +687,14 @@ bool ExceptionHandler::WriteMinidump() {
   sys_prctl(PR_SET_DUMPABLE, 1, 0, 0, 0);
 
   CrashContext context;
+#if defined(__GLIBC__)
   int getcontext_result = getcontext(&context.context);
   if (getcontext_result)
     return false;
+#else
+  // Extreme hack - see comments above.
+  memset (&context.context, 0, sizeof(&context.context));
+#endif
 
 #if defined(__i386__)
   // In CPUFillFromUContext in minidumpwriter.cc the stack pointer is retrieved
diff --git a/src/client/linux/minidump_writer/linux_core_dumper.cc b/src/client/linux/minidump_writer/linux_core_dumper.cc
index 92e3a84..a4bd9ba 100644
--- a/src/client/linux/minidump_writer/linux_core_dumper.cc
+++ b/src/client/linux/minidump_writer/linux_core_dumper.cc
@@ -208,7 +208,7 @@ bool LinuxCoreDumper::EnumerateThreads() {
         info.tgid = status->pr_pgrp;
         info.ppid = status->pr_ppid;
 #if defined(__mips__)
-#if defined(__ANDROID__)
+#if defined(__ANDROID__) || !defined(__GLIBC__)
         for (int i = EF_R0; i <= EF_R31; i++)
           info.mcontext.gregs[i - EF_R0] = status->pr_reg[i];
 #else  // __ANDROID__
diff --git a/src/common/dwarf/elf_reader.cc b/src/common/dwarf/elf_reader.cc
index c6d9f08..91b5141 100644
--- a/src/common/dwarf/elf_reader.cc
+++ b/src/common/dwarf/elf_reader.cc
@@ -30,9 +30,13 @@
 #define _GNU_SOURCE  // needed for pread()
 #endif
 
+#include <config.h>
 #include <fcntl.h>
 #include <limits.h>
 #include <string.h>
+#ifdef HAVE_SYS_REG_H
+#include <sys/reg.h>
+#endif
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <sys/types.h>
diff --git a/src/common/linux/elf_core_dump.h b/src/common/linux/elf_core_dump.h
index c8117a0..e909e22 100644
--- a/src/common/linux/elf_core_dump.h
+++ b/src/common/linux/elf_core_dump.h
@@ -33,11 +33,14 @@
 #ifndef COMMON_LINUX_ELF_CORE_DUMP_H_
 #define COMMON_LINUX_ELF_CORE_DUMP_H_
 
+#include <config.h>
 #include <elf.h>
 #include <limits.h>
 #include <link.h>
 #include <stddef.h>
-
+#ifdef HAVE_SYS_REG_H
+#include <sys/reg.h>
+#endif
 #include "common/memory_range.h"
 
 namespace google_breakpad {
diff --git a/src/common/memory_allocator.h b/src/common/memory_allocator.h
index d28fbfc..e138afe 100644
--- a/src/common/memory_allocator.h
+++ b/src/common/memory_allocator.h
@@ -174,7 +174,7 @@ struct PageStdAllocator {
 
   template <class Other> PageStdAllocator(const PageStdAllocator<Other>& other)
       : allocator_(other.allocator_),
-        stackdata_(nullptr),
+        stackdata_(NULL),
         stackdata_size_(0)
   {}
 
diff --git a/src/common/stabs_reader.cc b/src/common/stabs_reader.cc
index 43c4040..d03c660 100644
--- a/src/common/stabs_reader.cc
+++ b/src/common/stabs_reader.cc
@@ -34,7 +34,9 @@
 #include "common/stabs_reader.h"
 
 #include <assert.h>
+#ifdef HAVE_STAB_H
 #include <stab.h>
+#endif
 #include <string.h>
 
 #include <string>
diff --git a/src/common/stabs_reader.h b/src/common/stabs_reader.h
index 1e773f4..9154872 100644
--- a/src/common/stabs_reader.h
+++ b/src/common/stabs_reader.h
@@ -58,6 +58,30 @@
 #elif defined(HAVE_A_OUT_H)
 #include <a.out.h>
 #endif
+// Definitions from <stab.h> and <a.out.h> for systems which
+// do not have them
+#ifndef HAVE_A_OUT_H
+#undef N_UNDF
+#define N_UNDF 0x0
+#ifndef N_FUN
+#define N_FUN 0x24
+#endif
+#ifndef N_SLINE
+#define N_SLINE 0x44
+#endif
+#ifndef N_SO
+#define N_SO 0x64
+#endif
+#ifndef N_LSYM
+#define N_LSYM 0x80
+#endif
+#ifndef N_BINCL
+#define N_BINCL 0x82
+#endif
+#ifndef N_SOL
+#define N_SOL 0x84
+#endif
+#endif
 
 #include <string>
 #include <vector>
diff --git a/src/common/stabs_reader_unittest.cc b/src/common/stabs_reader_unittest.cc
index 24f3e1a..1a148bd 100644
--- a/src/common/stabs_reader_unittest.cc
+++ b/src/common/stabs_reader_unittest.cc
@@ -33,7 +33,9 @@
 
 #include <assert.h>
 #include <errno.h>
+#ifdef HAVE_STAB_H
 #include <stab.h>
+#endif
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
diff --git a/src/tools/linux/md2core/minidump-2-core.cc b/src/tools/linux/md2core/minidump-2-core.cc
index 7e351d1..db892bd 100644
--- a/src/tools/linux/md2core/minidump-2-core.cc
+++ b/src/tools/linux/md2core/minidump-2-core.cc
@@ -524,8 +524,12 @@ ParseThreadRegisters(CrashedProcess::Thread* thread,
   thread->mcontext.lo3 = rawregs->lo[2];
 
   for (int i = 0; i < MD_FLOATINGSAVEAREA_MIPS_FPR_COUNT; ++i) {
+#ifdef __GLIBC__
     thread->mcontext.fpregs.fp_r.fp_fregs[i]._fp_fregs =
         rawregs->float_save.regs[i];
+#else
+    thread->mcontext.fpregs[i] = rawregs->float_save.regs[i];
+#endif
   }
 
   thread->mcontext.fpc_csr = rawregs->float_save.fpcsr;
-- 
2.7.4

