From 17e6eda55141af7be09076404e7ee5cd09f6b6af Mon Sep 17 00:00:00 2001
From: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
Date: Thu, 13 Jul 2023 16:19:47 +0530
Subject: [PATCH] hostapd: unsolicited broadcast Probe response during CCA.

During color change announcement, if the unsol_bcast_presp interval is set,
then generate and send unsolicited broadcast Probe Response Frame to
driver to update the probe response template.

Signed-off-by: Rathees Kumar R Chinannan <quic_rrchinan@quicinc.com>
---
 hostapd/ctrl_iface.c         | 7 ++++++-
 src/ap/hostapd.c             | 2 ++
 src/drivers/driver.h         | 2 ++
 src/drivers/driver_nl80211.c | 6 +++++-
 4 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 87b63e7..f01b501 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2694,6 +2694,9 @@ static int hostapd_ctrl_iface_color_change(struct hostapd_iface *iface,
 		if (hostapd_fill_cca_settings(bss, &settings)) {
 			wpa_printf(MSG_DEBUG, "hostapd fill cca settings failed for color: %d\n", color);
 			hostapd_cleanup_cca_params(bss);
+			if (settings.ubpr.unsol_bcast_probe_resp_tmpl) {
+				os_free(settings.ubpr.unsol_bcast_probe_resp_tmpl);
+			}
 			continue;
 		}
 
@@ -2701,7 +2704,9 @@ static int hostapd_ctrl_iface_color_change(struct hostapd_iface *iface,
 		ret = hostapd_drv_switch_color(bss, &settings);
 		free_beacon_data(&settings.beacon_cca);
 		free_beacon_data(&settings.beacon_after);
-
+		if (settings.ubpr.unsol_bcast_probe_resp_tmpl) {
+			os_free(settings.ubpr.unsol_bcast_probe_resp_tmpl);
+		}
 		if (ret)
 			 hostapd_cleanup_cca_params(bss);
 	}
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index ac99770..6b4006e 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4710,6 +4710,8 @@ int hostapd_fill_cca_settings(struct hostapd_data *hapd,
 		free_beacon_data(&settings->beacon_after);
 		return ret;
 	}
+	settings->ubpr.unsol_bcast_probe_resp_tmpl =
+		hostapd_unsol_bcast_probe_resp(hapd, &settings->ubpr);
 
 	settings->counter_offset_beacon = hapd->cca_c_off_beacon;
 	settings->counter_offset_presp = hapd->cca_c_off_proberesp;
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 504adde..9275c83 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2706,6 +2706,7 @@ struct csa_settings {
  * @beacon_after: Next Beacon/Probe Response/(Re)Association Response frame info
  * @counter_offset_beacon: Offset to the count field in Beacon frame tail
  * @counter_offset_presp: Offset to the count field in Probe Response frame
+ * @ubpr: unsolicited Probe Response frame
  */
 struct cca_settings {
 	u8 cca_count;
@@ -2716,6 +2717,7 @@ struct cca_settings {
 
 	u16 counter_offset_beacon;
 	u16 counter_offset_presp;
+	struct unsol_bcast_probe_resp ubpr;
 };
 
 /* TDLS peer capabilities for send_tdls_mgmt() */
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 744117a..56b9bdb 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -11162,7 +11162,11 @@ static int nl80211_switch_color(void *priv, struct cca_settings *settings)
 			return -1;
 		}
 	}
-
+	if (settings->ubpr.unsol_bcast_probe_resp_interval &&
+		nl80211_unsol_bcast_probe_resp(bss, msg, &settings->ubpr) < 0) {
+		ret = -ENOBUFS;
+		goto error;
+	}
 	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
 	if (ret) {
 		wpa_printf(MSG_DEBUG,
-- 
2.17.1

