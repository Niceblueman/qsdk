From 524c5e2503d55d81a88ade6c3f60d937fcc265c2 Mon Sep 17 00:00:00 2001
From: Urvishkumar Pandya <quic_urvishku@quicinc.com>
Date: Sun, 7 Jan 2024 13:48:30 +0530
Subject: [PATCH] iw-Add-support-for-link-specific-station-dump-fields

---
 iw.h      |  1 +
 station.c | 65 +++++++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 55 insertions(+), 11 deletions(-)

diff --git a/iw.h b/iw.h
index 37285e8..2b658db 100644
--- a/iw.h
+++ b/iw.h
@@ -41,6 +41,7 @@ enum nlmsgerr_attrs {
 
 #define ETH_ALEN 6
 #define VHT_MUMIMO_GROUP_LEN 24
+#define MLD_MAX_LINK_BUF_SIZE 100
 
 /* libnl 1.x compatibility code */
 #if !defined(CONFIG_LIBNL20) && !defined(CONFIG_LIBNL30)
diff --git a/station.c b/station.c
index d7a54f2..01ec9d1 100644
--- a/station.c
+++ b/station.c
@@ -148,9 +148,11 @@ static void parse_tid_stats(struct nlattr *tid_stats_attr)
 		printf("\n\tTXQs:%s", txqbuf);
 }
 
-static void parse_bss_param(struct nlattr *bss_param_attr)
+static void parse_bss_param(struct nlattr *bss_param_attr,
+                           struct nlattr *tb[NL80211_ATTR_MAX + 1])
 {
 	struct nlattr *bss_param_info[NL80211_STA_BSS_PARAM_MAX + 1], *info;
+	struct nlattr *attrs;
 	static struct nla_policy bss_poilcy[NL80211_STA_BSS_PARAM_MAX + 1] = {
 		[NL80211_STA_BSS_PARAM_CTS_PROT] = { .type = NLA_FLAG },
 		[NL80211_STA_BSS_PARAM_SHORT_PREAMBLE] = { .type = NLA_FLAG },
@@ -159,17 +161,58 @@ static void parse_bss_param(struct nlattr *bss_param_attr)
 		[NL80211_STA_BSS_PARAM_BEACON_INTERVAL] = { .type = NLA_U16 },
 	};
 
-	if (nla_parse_nested(bss_param_info, NL80211_STA_BSS_PARAM_MAX,
-			     bss_param_attr, bss_poilcy)) {
-		printf("failed to parse nested bss param attributes!");
+       if (tb[NL80211_ATTR_MLO_LINKS]) {
+               int ret = 0, dtim_offset = 0, beacon_int_offset = 0;
+               const char *dtim_indent = "", *beacon_int_indent = "";
+               char dtim_buf[MLD_MAX_LINK_BUF_SIZE],
+                    beacon_int_buf[MLD_MAX_LINK_BUF_SIZE];
+
+               nla_for_each_nested(attrs, bss_param_attr, ret) {
+                       if (nla_parse_nested(bss_param_info,
+                                            NL80211_STA_BSS_PARAM_MAX,
+                                            attrs, bss_poilcy)) {
+                               printf("\nFailed to parse nested bss param attributes!\n");
+                       }
+
+                       info = bss_param_info[NL80211_STA_BSS_PARAM_DTIM_PERIOD];
+
+                       if (info) {
+                               dtim_offset += snprintf(dtim_buf + dtim_offset,
+                                                       MLD_MAX_LINK_BUF_SIZE - dtim_offset,
+                                                       "%s%u", dtim_indent,
+                                                       nla_get_u8(info));
+                               dtim_indent = ", ";
+                       }
+
+                       info = bss_param_info[NL80211_STA_BSS_PARAM_BEACON_INTERVAL];
+
+                       if (info) {
+                               beacon_int_offset += snprintf(beacon_int_buf + beacon_int_offset,
+                                                             MLD_MAX_LINK_BUF_SIZE - beacon_int_offset,
+                                                             "%s%u", beacon_int_indent,
+                                                             nla_get_u16(info));
+                               beacon_int_indent = ", ";
+                       }
+               }
+
+               printf("\n\tDTIM period:\t%s",dtim_buf);
+
+               printf("\n\tbeacon interval:%s",beacon_int_buf);
+       } else {
+               if (nla_parse_nested(bss_param_info,
+                                    NL80211_STA_BSS_PARAM_MAX,
+                                    bss_param_attr, bss_poilcy)) {
+                       printf("\nFailed to parse nested bss param attributes!\n");
+               }
+
+               info = bss_param_info[NL80211_STA_BSS_PARAM_DTIM_PERIOD];
+               if (info)
+                       printf("\n\tDTIM period:\t%u", nla_get_u8(info));
+               info = bss_param_info[NL80211_STA_BSS_PARAM_BEACON_INTERVAL];
+               if (info)
+                       printf("\n\tbeacon interval:%u", nla_get_u16(info));
 	}
 
-	info = bss_param_info[NL80211_STA_BSS_PARAM_DTIM_PERIOD];
-	if (info)
-		printf("\n\tDTIM period:\t%u", nla_get_u8(info));
-	info = bss_param_info[NL80211_STA_BSS_PARAM_BEACON_INTERVAL];
-	if (info)
-		printf("\n\tbeacon interval:%u", nla_get_u16(info));
 	info = bss_param_info[NL80211_STA_BSS_PARAM_CTS_PROT];
 	if (info) {
 		printf("\n\tCTS protection:");
@@ -604,7 +647,7 @@ static int print_sta_handler(struct nl_msg *msg, void *arg)
 	    !strcmp((char *)arg, "-v"))
 		parse_tid_stats(sinfo[NL80211_STA_INFO_TID_STATS]);
 	if (sinfo[NL80211_STA_INFO_BSS_PARAM])
-		parse_bss_param(sinfo[NL80211_STA_INFO_BSS_PARAM]);
+		parse_bss_param(sinfo[NL80211_STA_INFO_BSS_PARAM], tb);
 	if (sinfo[NL80211_STA_INFO_CONNECTED_TIME])
 		printf("\n\tconnected time:\t%u seconds",
 			nla_get_u32(sinfo[NL80211_STA_INFO_CONNECTED_TIME]));
-- 
2.17.1

