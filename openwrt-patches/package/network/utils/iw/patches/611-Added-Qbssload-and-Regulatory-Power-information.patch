From 258f4c77489c6b590251b77bc58aedcfcfabc6f6 Mon Sep 17 00:00:00 2001
From: Sri Vidya Gunturi <quic_sgunturi@quicinc.com>
Date: Thu, 25 Apr 2024 11:35:41 +0530
Subject: [PATCH] Added Qbssload and Regulatory Power information

Signed-off-by: Sri Vidya Gunturi <quic_sgunturi@quicinc.com>
---
 scan.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 54 insertions(+), 4 deletions(-)

diff --git a/scan.c b/scan.c
index d0de8ec..62888a7 100644
--- a/scan.c
+++ b/scan.c
@@ -1647,10 +1647,17 @@ static void print_secchan_offs(const uint8_t type, uint8_t len,
 static void print_bss_load(const uint8_t type, uint8_t len, const uint8_t *data,
 			   const struct print_ies_data *ie_buffer)
 {
+	uint8_t qbssload_ie_valid = 0;
+
 	printf("\n");
-	printf("\t\t * station count: %d\n", (data[1] << 8) | data[0]);
-	printf("\t\t * channel utilisation: %d/255\n", data[2]);
-	printf("\t\t * available admission capacity: %d [*32us]\n", (data[4] << 8) | data[3]);
+	if(len == 5) {
+		qbssload_ie_valid = 1;
+		printf("\t\t * station count: %d\n", (data[1] << 8) | data[0]);
+		printf("\t\t * channel utilisation: %d/255 (%.4f%%)\n", data[2], ((double)data[2]/(double)255)*100);
+		printf("\t\t * available admission capacity: %d (%lu us/s)\n", (data[4] << 8) | data[3],
+			(unsigned long int)(((data[4] << 8) | data[3]) * 32));
+	}
+	printf("\t\t * qbssload_ie_valid: %d\n", qbssload_ie_valid);
 }
 
 static void print_mesh_conf(const uint8_t type, uint8_t len,
@@ -1729,6 +1736,7 @@ static void print_ie(const struct ie_print *p, const uint8_t type, uint8_t len,
 
 static const struct ie_print ieprinters[] = {
 	[0] = { "SSID", print_ssid, 0, 32, BIT(PRINT_SCAN) | BIT(PRINT_LINK), },
+	[11] = { "BSS Load", print_bss_load, 0, 5, BIT(PRINT_SCAN), },
 	[45] = { "HT capabilities", print_ht_capa, 26, 26, BIT(PRINT_SCAN), },
 	[48] = { "RSN", print_rsn, 2, 255, BIT(PRINT_SCAN), },
 	[61] = { "HT operation", print_ht_op, 22, 22, BIT(PRINT_SCAN), },
@@ -1742,7 +1750,6 @@ static const struct ie_print ieprinters[] = {
 	[5] = { "TIM", print_tim, 4, 255, BIT(PRINT_SCAN), },
 	[6] = { "IBSS ATIM window", print_ibssatim, 2, 2, BIT(PRINT_SCAN), },
 	[7] = { "Country", print_country, 3, 255, BIT(PRINT_SCAN), },
-	[11] = { "BSS Load", print_bss_load, 5, 5, BIT(PRINT_SCAN), },
 	[32] = { "Power constraint", print_powerconstraint, 1, 1, BIT(PRINT_SCAN), },
 	[35] = { "TPC report", print_tpcreport, 2, 2, BIT(PRINT_SCAN), },
 	[42] = { "ERP", print_erp, 1, 255, BIT(PRINT_SCAN), },
@@ -2339,8 +2346,42 @@ static void print_eht_oper(const uint8_t type, uint8_t len, const uint8_t *data,
 	}
 }
 
+static void print_he_oper(const uint8_t type, uint8_t len, const uint8_t *data,
+			   const struct print_ies_data *ie_buffer)
+{
+	uint8_t  reg_ap_pwr_type= 0;
+	const char *reginfo_name[] = {
+		[0] = "Indoor Access Point",
+		[1] = "Standard Power Access Point",
+		[2] = "Very Low Power Access Point",
+		[3 ... 7] = "Reserved",
+		[8] = "Indoor Standard Power Access Point",
+		[9 ... 15] = "Reserved",
+	};
+
+	/*
+	* According to the 11ax 2021 standard:
+	* The regulatory power element is present in the 6GHz Operation Information.
+	* This 6GHz Operation Information is 5 bytes long and is the last element in
+	* the HE Operation IE. The Regulatory Power element is in the 2nd byte of 6GHz
+	* Operation Information element. So we perform (len-1)-5+2 = len-4.
+	*/
+	printf("\n");
+	if(len >= 11)
+	{
+		reg_ap_pwr_type = ((data[len-4] >> 3) & 0xF);
+		printf("\t\t * regulatory info: %s (0x%.2x)\n",
+			reg_ap_pwr_type < ARRAY_SIZE(reginfo_name) ? reginfo_name[reg_ap_pwr_type] : "unknown",
+			reg_ap_pwr_type);
+	} else {
+		printf("\t\t * regulatory info: not supported\n");
+	}
+}
+
+
 static const struct ie_print ext_printers[] = {
 	[35] = { "HE capabilities", print_he_capa, 21, 54, BIT(PRINT_SCAN), },
+	[36] = { "HE Operation", print_he_oper, 6, 15, BIT(PRINT_SCAN), },
 	[106] = { "EHT Operation", print_eht_oper, 5, 11, BIT(PRINT_SCAN), },
 };
 
@@ -2377,6 +2418,7 @@ void print_ies(unsigned char *ie, int ielen, bool unknown,
 	struct print_ies_data ie_buffer = {
 		.ie = ie,
 		.ielen = ielen };
+	uint8_t qbss_load_ie_valid = 0;
 
 	if (ie == NULL || ielen < 0)
 		return;
@@ -2385,6 +2427,9 @@ void print_ies(unsigned char *ie, int ielen, bool unknown,
 		if (ie[0] < ARRAY_SIZE(ieprinters) &&
 		    ieprinters[ie[0]].name &&
 		    ieprinters[ie[0]].flags & BIT(ptype)) {
+			if (ie[0] == 11) {
+				qbss_load_ie_valid = 1;
+			}
 			print_ie(&ieprinters[ie[0]],
 				 ie[0], ie[1], ie + 2, &ie_buffer);
 #ifdef IW_FULL
@@ -2404,6 +2449,11 @@ void print_ies(unsigned char *ie, int ielen, bool unknown,
 		ielen -= ie[1] + 2;
 		ie += ie[1] + 2;
 	}
+
+	if (!qbss_load_ie_valid) {
+		print_ie(&ieprinters[11],
+				 11, 0, NULL, &ie_buffer);
+	}
 }
 
 static void print_capa_dmg(__u16 capa)
-- 
2.17.1

